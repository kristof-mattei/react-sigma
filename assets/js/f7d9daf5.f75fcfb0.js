"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[959],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),d=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=d(r),g=n,u=h["".concat(p,".").concat(g)]||h[g]||c[g]||o;return r?a.createElement(u,i(i({ref:t},s),{},{components:r})):a.createElement(u,i({ref:t},s))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8158:(e,t,r)=>{r.d(t,{G:()=>o,Z:()=>i});var a=r(7294),n=r(814);const o=e=>{let{code:t,title:r,children:o,mode:i="code"}=e;const[l,p]=(0,a.useState)(i);return a.createElement("div",{className:"code-preview"},a.createElement("div",{className:"header"},a.createElement("div",null,r&&a.createElement("h5",null,r)),a.createElement("div",{className:"switch"},a.createElement("button",{className:"button",onClick:()=>p("code"),disabled:"code"===l},"Code"),a.createElement("button",{className:"button",onClick:()=>p("preview"),disabled:"preview"===l},"Preview"))),a.createElement("div",{className:"content"},"preview"===l&&o,"code"===l&&a.createElement(n.Z,{language:"jsx"},t)))},i=o},3265:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>g,default:()=>b,frontMatter:()=>h,metadata:()=>u,toc:()=>y});var a=r(7462),n=r(7294),o=r(3905),i=r(8158),l=r(2698),p=r(8925);const d=()=>{const e=new l.MultiDirectedGraph;return e.addNode("A",{x:0,y:0,label:"Node A",size:10}),e.addNode("B",{x:1,y:1,label:"Node B",size:10}),e.addEdgeWithKey("rel1","A","B",{label:"REL_1"}),n.createElement(p.C6,{style:{height:"500px"},graph:e})},s=()=>{const e=()=>{const e=(0,p.sG)();return(0,n.useEffect)((()=>{const t=new l.MultiDirectedGraph;t.addNode("A",{x:0,y:0,label:"Node A",size:10}),t.addNode("B",{x:1,y:1,label:"Node B",size:10}),t.addEdgeWithKey("rel1","A","B",{label:"REL_1"}),e(t)}),[e]),null};return n.createElement(p.C6,{style:{height:"500px"}},n.createElement(e,null))},c=()=>{const e=()=>{const e=(0,p.sG)();return(0,n.useEffect)((()=>{const t=new l.MultiDirectedGraph;t.addNode("A",{x:0,y:0,label:"Node A",size:10}),t.addNode("B",{x:1,y:1,label:"Node B",size:10}),t.addEdgeWithKey("rel1","A","B",{label:"REL_1"}),t.addEdgeWithKey("rel2","A","B",{label:"REL_2"}),e(t)}),[e]),null};return n.createElement(p.C6,{graph:l.MultiDirectedGraph,style:{height:"500px"},settings:{renderEdgeLabels:!0,defaultEdgeType:"arrow"}},n.createElement(e,null))},h={},g="Load a graph",u={unversionedId:"example/load-graph",id:"example/load-graph",title:"Load a graph",description:"Graph property on SigmaContainer",source:"@site/docs/example/01_load-graph.mdx",sourceDirName:"example",slug:"/example/load-graph",permalink:"/react-sigma/docs/example/load-graph",draft:!1,editUrl:"https://github.com/sim51/react-sigma/tree/main/packages/website/docs/example/01_load-graph.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"layout-noverlap",permalink:"/react-sigma/docs/api/layout-noverlap/"},next:{title:"Events",permalink:"/react-sigma/docs/example/events"}},m={},y=[{value:"Graph property on <strong>SigmaContainer</strong>",id:"graph-property-on-sigmacontainer",level:2},{value:"By using <strong>useLoadGraph</strong>",id:"by-using-useloadgraph",level:2}],f={toc:y};function b(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"load-a-graph"},"Load a graph"),(0,o.kt)("h2",{id:"graph-property-on-sigmacontainer"},"Graph property on ",(0,o.kt)("strong",{parentName:"h2"},"SigmaContainer")),(0,o.kt)("p",null,"Component ",(0,o.kt)("inlineCode",{parentName:"p"},"SigmaContainer")," can take a ",(0,o.kt)("inlineCode",{parentName:"p"},"graph")," property which is either a graph instance or a graph constructor."),(0,o.kt)("p",null,"So you can use it to load your graph."),(0,o.kt)(i.G,{code:'import React, { FC } from "react";\n\nimport "@react-sigma/core/lib/react-sigma.min.css";\nimport { MultiDirectedGraph } from "graphology";\nimport { SigmaContainer } from "@react-sigma/core";\n\nconst LoadGraphWithByProp: FC = () => {\n  // Create the graph\n  const graph = new MultiDirectedGraph();\n  graph.addNode("A", { x: 0, y: 0, label: "Node A", size: 10 });\n  graph.addNode("B", { x: 1, y: 1, label: "Node B", size: 10 });\n  graph.addEdgeWithKey("rel1", "A", "B", { label: "REL_1" });\n\n  return <SigmaContainer style={{ height: "500px" }} graph={graph}></SigmaContainer>;\n};\n\nexport default LoadGraphWithByProp;\n',title:"Loading a graph via the graph property",mdxType:"CodePreview"},(0,o.kt)(d,{mdxType:"LoadGraphWithProp"})),(0,o.kt)("h2",{id:"by-using-useloadgraph"},"By using ",(0,o.kt)("strong",{parentName:"h2"},"useLoadGraph")),(0,o.kt)("p",null,"In a children component of ",(0,o.kt)("inlineCode",{parentName:"p"},"SigmaContainer"),", you can use the hook ",(0,o.kt)("inlineCode",{parentName:"p"},"useLoadGraph"),"."),(0,o.kt)("p",null,"This hook is just returns a function that takes a graphology instance, and load it in Sigma."),(0,o.kt)(i.G,{code:'import React, { FC, useEffect } from "react";\n\nimport "@react-sigma/core/lib/react-sigma.min.css";\nimport { MultiDirectedGraph } from "graphology";\nimport { SigmaContainer, useLoadGraph } from "@react-sigma/core";\n\nconst LoadGraphWithHook: FC = () => {\n  const MyGraph: FC = () => {\n    const loadGraph = useLoadGraph();\n\n    useEffect(() => {\n      // Create the graph\n      const graph = new MultiDirectedGraph();\n      graph.addNode("A", { x: 0, y: 0, label: "Node A", size: 10 });\n      graph.addNode("B", { x: 1, y: 1, label: "Node B", size: 10 });\n      graph.addEdgeWithKey("rel1", "A", "B", { label: "REL_1" });\n      loadGraph(graph);\n    }, [loadGraph]);\n\n    return null;\n  };\n\n  return (\n    <SigmaContainer style={{ height: "500px" }}>\n      <MyGraph />\n    </SigmaContainer>\n  );\n};\n\nexport default LoadGraphWithHook;\n',title:"Loading a graph with useLoadGraph hook",mdxType:"CodePreview"},(0,o.kt)(s,{mdxType:"LoadGraphWithHook"})),(0,o.kt)("p",null,"Per default, when the ",(0,o.kt)("inlineCode",{parentName:"p"},"SigmaContainer")," is mounted, the library create a default graphology graph (see ",(0,o.kt)("a",{parentName:"p",href:"https://graphology.github.io/instantiation.html"},"https://graphology.github.io/instantiation.html"),").\nBut you can define the type of graph that react-sigma will create by passing the constructor you want to use."),(0,o.kt)("p",null,"This step is mandatory if you want to use a multi graph (ie. parallel edges)."),(0,o.kt)(i.G,{code:'import React, { FC, useEffect } from "react";\n\nimport "@react-sigma/core/lib/react-sigma.min.css";\nimport { MultiDirectedGraph } from "graphology";\nimport { SigmaContainer, useLoadGraph } from "@react-sigma/core";\n\nexport const MultiGraph: FC = () => {\n  const MyGraph: FC = () => {\n    const loadGraph = useLoadGraph();\n\n    useEffect(() => {\n      // Create the graph\n      const graph = new MultiDirectedGraph();\n      graph.addNode("A", { x: 0, y: 0, label: "Node A", size: 10 });\n      graph.addNode("B", { x: 1, y: 1, label: "Node B", size: 10 });\n      graph.addEdgeWithKey("rel1", "A", "B", { label: "REL_1" });\n      graph.addEdgeWithKey("rel2", "A", "B", { label: "REL_2" });\n      loadGraph(graph);\n    }, [loadGraph]);\n\n    return null;\n  };\n\n  return (\n    <SigmaContainer\n      graph={MultiDirectedGraph}\n      style={{ height: "500px" }}\n      settings={{ renderEdgeLabels: true, defaultEdgeType: "arrow" }}\n    >\n      <MyGraph />\n    </SigmaContainer>\n  );\n};\n\nexport default MultiGraph;\n',title:"Defining the graph constructor",mdxType:"CodePreview"},(0,o.kt)(c,{mdxType:"MultiGraph"})))}b.isMDXComponent=!0}}]);