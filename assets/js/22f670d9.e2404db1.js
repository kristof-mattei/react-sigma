"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[851],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(r),h=n,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||o;return r?a.createElement(d,i(i({ref:t},c),{},{components:r})):a.createElement(d,i({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7404:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={},i="Setup",p={unversionedId:"start-setup",id:"start-setup",title:"Setup",description:"1. Follow all the steps from the installation page",source:"@site/docs/start-setup.md",sourceDirName:".",slug:"/start-setup",permalink:"/react-sigma/docs/start-setup",draft:!1,editUrl:"https://github.com/sim51/react-sigma/tree/main/packages/website/docs/start-setup.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Installation",permalink:"/react-sigma/docs/start-installation"},next:{title:"Project structure",permalink:"/react-sigma/docs/api"}},l={},s=[{value:"Graph Constructor",id:"graph-constructor",level:2},{value:"Graph instance",id:"graph-instance",level:2}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"setup"},"Setup"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Follow all the steps from the ",(0,n.kt)("a",{parentName:"p",href:"/react-sigma/docs/start-installation"},"installation page"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},'Import the React Sigma style file in your application.\nDepending on your React app setup, the way to import a CSS file might differ.\nHere is an example with "create react app" setup : ',(0,n.kt)("inlineCode",{parentName:"p"},'import "@react-sigma/core/lib/react-sigma.min.css"'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create the following components into your app and check it displays correctly:"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useEffect } from "react";\nimport Graph from "graphology";\nimport { SigmaContainer, useLoadGraph } from "@react-sigma/core";\nimport "@react-sigma/core/lib/react-sigma.min.css";\n\nexport const LoadGraph = () => {\n  const loadGraph = useLoadGraph();\n\n  useEffect(() => {\n    const graph = new Graph();\n    graph.addNode("first", { x: 0, y: 0, size: 15, label: "My first node", color: "#FA4F40" });\n    loadGraph(graph);\n  }, [loadGraph]);\n\n  return null;\n};\n\nexport const DisplayGraph = () => {\n  return (\n    <SigmaContainer style={{ height: "500px", width: "500px" }}>\n      <LoadGraph />\n    </SigmaContainer>\n  );\n};\n')),(0,n.kt)("p",null,"You can take a look at this ",(0,n.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/react-sigma-example-qlkqg8"},"code sandbox")," to see a working example."),(0,n.kt)("p",null,"If the graph is not displayed properly, it is most likely because you haven't followed all the prerequisites."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Make sure you have imported React Sigma style file"),(0,n.kt)("li",{parentName:"ol"},"Make sure all dependencies are installed and using supported versions"),(0,n.kt)("li",{parentName:"ol"},"Make sure your Graph container has a defined height")),(0,n.kt)("p",null,"If you're still having trouble, you can use the ",(0,n.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/tagged/sigma.js"},"Stack Overflow"),"."),(0,n.kt)("h1",{id:"the-graph-property-on-sigmacontainer"},"The ",(0,n.kt)("inlineCode",{parentName:"h1"},"graph")," property on ",(0,n.kt)("inlineCode",{parentName:"h1"},"SigmaContainer")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"SigmaContainer")," takes an optional property ",(0,n.kt)("inlineCode",{parentName:"p"},"graph"),".\nThis property can be either a ",(0,n.kt)("strong",{parentName:"p"},"graphology instance"),", or a ",(0,n.kt)("strong",{parentName:"p"},"graph constructor")),(0,n.kt)("h2",{id:"graph-constructor"},"Graph Constructor"),(0,n.kt)("p",null,"The library creates for you a default graph instance for graphology.\nPer default on graphology, a graph is :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"mixed")," (ie undirected & directed)"),(0,n.kt)("li",{parentName:"ul"},"with self-loop"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"without")," multi-edges")),(0,n.kt)("p",null,"If you need a different graph definition, you have to pass to the ",(0,n.kt)("inlineCode",{parentName:"p"},"SigmaContainer")," component,\nthe good ",(0,n.kt)("a",{parentName:"p",href:"https://graphology.github.io/instantiation.html#typed-constructors"},"graphology constructor")),(0,n.kt)("p",null,"Example :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { FC, useEffect } from "react";\nimport { MultiDirectedGraph } from "graphology";\n\nimport { SigmaContainer, useLoadGraph } from "@react-sigma/core";\n\nconst MyGraph: FC = () => {\n  const loadGraph = useLoadGraph();\n\n  useEffect(() => {\n    // Create the graph\n    const graph = new MultiDirectedGraph();\n    graph.addNode("A", { x: 0, y: 0, label: "Node A", size: 10 });\n    graph.addNode("B", { x: 1, y: 1, label: "Node B", size: 10 });\n    graph.addEdgeWithKey("rel1", "A", "B", { label: "REL_1" });\n    graph.addEdgeWithKey("rel2", "A", "B", { label: "REL_2" });\n\n    loadGraph(graph);\n  }, [loadGraph]);\n\n  return null;\n};\n\nexport const MultiDirectedGraphView: FC = () => {\n  return (\n    <SigmaContainer graph={MultiDirectedGraph}>\n      <MyGraph />\n    </SigmaContainer>\n  );\n};\n')),(0,n.kt)("h2",{id:"graph-instance"},"Graph instance"),(0,n.kt)("p",null,"You can directly pass a graph instance to the ",(0,n.kt)("inlineCode",{parentName:"p"},"SigmaContainer"),", but in this case at each render of the component, Sigma will be killed, recreated and the graph loaded."),(0,n.kt)("p",null,"In this scenario you must control the react lifecycle of its parent component, to avoid poor performances, specially with heavy graphs."),(0,n.kt)("p",null,"Examples :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import Graph from "graphology";\nimport { SigmaContainer, useLoadGraph } from "@react-sigma/core";\nimport "@react-sigma/core/lib/react-sigma.min.css";\n\nexport const DisplayGraph = () => {\n  const graph = new Graph();\n  graph.addNode("first", { x: 0, y: 0, size: 15, label: "My first node", color: "#FA4F40" });\n  return <SigmaContainer style={{ height: "500px", width: "500px" }} graph={graph}></SigmaContainer>;\n};\n')))}u.isMDXComponent=!0}}]);