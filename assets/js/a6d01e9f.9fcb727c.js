(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[574],{8158:(e,t,a)=>{"use strict";a.d(t,{G:()=>n,Z:()=>l});var o=a(7294),r=a(814);const n=e=>{let{code:t,title:a,children:n,mode:l="code"}=e;const[i,s]=(0,o.useState)(l);return o.createElement("div",{className:"code-preview"},o.createElement("div",{className:"header"},o.createElement("div",null,a&&o.createElement("h5",null,a)),o.createElement("div",{className:"switch"},o.createElement("button",{className:"button",onClick:()=>s("code"),disabled:"code"===i},"Code"),o.createElement("button",{className:"button",onClick:()=>s("preview"),disabled:"preview"===i},"Preview"))),o.createElement("div",{className:"content"},"preview"===i&&n,"code"===i&&o.createElement(r.Z,{language:"jsx"},t)))},l=n},8370:(e,t,a)=>{"use strict";a.d(t,{a:()=>u});var o=a(7294),r=a(2698),n=a.n(r),l=a(8925),i=a(1154),s=a(5506);const u=e=>{let{order:t,probability:a}=e;const{faker:r,randomColor:u}=(0,s.g)(),c=(0,l.Ys)(),{assign:p}=(0,i.f)(),m=(0,l.$j)(),d=(0,l.sG)(),h=(0,l.eP)(),[g,y]=(0,o.useState)(null);return(0,o.useEffect)((()=>{const e=new(n());for(let a=0;a<t;a++)e.addNode(a,{label:r.name.fullName(),size:r.datatype.number({min:4,max:20,precision:1}),color:u(),x:0,y:0});for(let o=0;o<t;o++)for(let r=o+1;r<t;r++)Math.random()<a&&e.addDirectedEdge(o,r),Math.random()<a&&e.addDirectedEdge(r,o);d(e),p(),m({enterNode:e=>y(e.node),leaveNode:()=>y(null)})}),[p,d,m,r.datatype,r.name,u,t,a]),(0,o.useEffect)((()=>{h({nodeReducer:(e,t)=>{const a=c.getGraph(),o={...t,highlighted:t.highlighted||!1};return g&&(e===g||a.neighbors(g).includes(e)?o.highlighted=!0:(o.color="#E2E2E2",o.highlighted=!1)),o},edgeReducer:(e,t)=>{const a=c.getGraph(),o={...t,hidden:!1};return g&&!a.extremities(e).includes(g)&&(o.hidden=!0),o}})}),[g,h,c]),null}},5506:(e,t,a)=>{"use strict";a.d(t,{g:()=>i});var o=a(7294),r=a(6377),n=a.n(r),l=a(2779);const i=()=>{const e=new URLSearchParams(window.location.search).get("seed");(0,o.useEffect)((()=>{e&&(n()(e,{global:!0}),l.We.seed(Math.random()))}),[e]);const t=(0,o.useMemo)((()=>()=>{let e="#";for(let t=0;t<6;t++)e+="0123456789abcdef".charAt(Math.floor(16*Math.random()));return e}),[]);return{faker:l.We,randomColor:t}}},6147:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>v,frontMatter:()=>f,metadata:()=>w,toc:()=>C});var o=a(7462),r=a(7294),n=a(3905),l=a(8158),i=a(2698),s=a.n(i),u=a(8925),c=a(1154),p=a(5506);const m=()=>{const e=()=>{const{faker:e,randomColor:t}=(0,p.g)(),{positions:a,assign:o}=((0,u.Ys)(),(0,c.f)()),n=(0,u.sG)();return(0,r.useEffect)((()=>{const r=new(s());for(let a=0;a<100;a++)r.addNode(a,{label:e.name.fullName(),size:e.datatype.number({min:4,max:20,precision:1}),color:t(),x:0,y:0});for(let e=0;e<100;e++)for(let t=e+1;t<100;t++)Math.random()<.1&&r.addDirectedEdge(e,t),Math.random()<.1&&r.addDirectedEdge(t,e);n(r),o(),console.log(a())}),[o,n,e.datatype,e.name,t]),null};return r.createElement(u.C6,{style:{height:"500px"}},r.createElement(e,null))};var d=a(8289),h=a(8370);const g=()=>{const e=()=>{const{start:e,kill:t,isRunning:a}=(0,d.ln)({settings:{slowDown:10}});return(0,r.useEffect)((()=>(e(),()=>{t()})),[e,t]),null};return r.createElement(u.C6,{style:{height:"500px"}},r.createElement(h.a,{order:100,probability:.1}),r.createElement(e,null))},y=()=>r.createElement(u.C6,{style:{height:"500px"}},r.createElement(h.a,{order:100,probability:.1}),r.createElement(u.k2,{position:"bottom-right"},r.createElement(d.UZ,{settings:{settings:{slowDown:10}}}))),f={},k="Layouts",w={unversionedId:"example/layouts",id:"example/layouts",title:"Layouts",description:"The react-sigma includes some sub-libraries for managing layouts on graphs.",source:"@site/docs/example/04_layouts.mdx",sourceDirName:"example",slug:"/example/layouts",permalink:"/react-sigma/docs/example/layouts",draft:!1,editUrl:"https://github.com/sim51/react-sigma/tree/main/packages/website/docs/example/04_layouts.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"docs",previous:{title:"Drag'n'Drop",permalink:"/react-sigma/docs/example/drag_n_drop"},next:{title:"Frequently Asked Questions",permalink:"/react-sigma/docs/faq"}},b={},C=[{value:"List of available layouts",id:"list-of-available-layouts",level:2},{value:"Two types of layouts",id:"two-types-of-layouts",level:2},{value:"Regular layout",id:"regular-layout",level:2},{value:"Worker layout",id:"worker-layout",level:2}],N={toc:C};function v(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},N,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"layouts"},"Layouts"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"react-sigma")," includes some sub-libraries for managing layouts on graphs.\nThey provide hooks that helps you to apply/run a layout on your sigma instance."),(0,n.kt)("h2",{id:"list-of-available-layouts"},"List of available layouts"),(0,n.kt)("p",null,"We provide all the layouts that are part of graphology :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout.html#circular"},"circular")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-circular"},"@react-sigma/layout-circular")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout.html#circlepack"},"circlepack")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-circlepack"},"@react-sigma/layout-circlepack")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout-force.html"},"force")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-force"},"@react-sigma/layout-force")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout-forceatlas2.html"},"force atlas 2")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-forceatlas2"},"@react-sigma/layout-forceatlas2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout-noverlap.html"},"noverlap")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-noverlap"},"@react-sigma/layout-noverlap")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://graphology.github.io/standard-library/layout.html#random"},"random")," in ",(0,n.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@react-sigma/layout-random"},"@react-sigma/layout-random"))),(0,n.kt)("h2",{id:"two-types-of-layouts"},"Two types of layouts"),(0,n.kt)("p",null,"There are two types of layout, the one that you call just once (ex: ",(0,n.kt)("inlineCode",{parentName:"p"},"random")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"circular"),") and the worker one."),(0,n.kt)("h2",{id:"regular-layout"},"Regular layout"),(0,n.kt)("p",null,"For regular layout, we provide a hook that returns two functions :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"positions : a function that execute the layout on the sigma's graph (but doesn't modify it) and returns you a map of position where the key is the node key."),(0,n.kt)("li",{parentName:"ul"},"assign : a function that execute the layout on the sigma's graph and save the position of nodes in it")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const { positions, assign } = useLayoutCircular(...);\n")),(0,n.kt)("p",null,"To use one of those hooks you firstly need to install the ",(0,n.kt)("inlineCode",{parentName:"p"},"layout-core")," package and then the layout package you want to use.\nAs an example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-sigma/layout-core @react-sigma/layout-circular\n")),(0,n.kt)("p",null,"Then you can follow this example to see how to use it :"),(0,n.kt)(l.G,{code:'import React, { useEffect, useState } from "react";\n\nimport Graph from "graphology";\nimport { Attributes } from "graphology-types";\n\nimport { SigmaContainer, useSigma, useLoadGraph } from "@react-sigma/core";\nimport { useLayoutCircular } from "@react-sigma/layout-circular";\n\nimport { useSeedRandom } from "../useSeedRandom";\n\nexport const LayoutCircular: React.FC = () => {\n  const RandomCircleGraph: React.FC = () => {\n    const { faker, randomColor } = useSeedRandom();\n    const sigma = useSigma();\n    const { positions, assign } = useLayoutCircular();\n    const loadGraph = useLoadGraph();\n\n    useEffect(() => {\n      const order = 100;\n      const probability = 0.1;\n\n      // Create the graph\n      const graph = new Graph();\n      for (let i = 0; i < order; i++) {\n        graph.addNode(i, {\n          label: faker.name.fullName(),\n          size: faker.datatype.number({ min: 4, max: 20, precision: 1 }),\n          color: randomColor(),\n          x: 0,\n          y: 0,\n        });\n      }\n      for (let i = 0; i < order; i++) {\n        for (let j = i + 1; j < order; j++) {\n          if (Math.random() < probability) graph.addDirectedEdge(i, j);\n          if (Math.random() < probability) graph.addDirectedEdge(j, i);\n        }\n      }\n\n      loadGraph(graph);\n      assign();\n      console.log(positions());\n    }, [assign, loadGraph, faker.datatype, faker.name, randomColor]);\n\n    return null;\n  };\n\n  return (\n    <SigmaContainer style={{ height: "500px" }}>\n      <RandomCircleGraph />\n    </SigmaContainer>\n  );\n};\n\nexport default LayoutCircular;\n',title:"Apply a circular layout on the graph",mdxType:"CodePreview"},(0,n.kt)(m,{mdxType:"LayoutCircular"})),(0,n.kt)("h2",{id:"worker-layout"},"Worker layout"),(0,n.kt)("p",null,"For worker layout, we provide a hook that returns :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"function to start the layout"),(0,n.kt)("li",{parentName:"ul"},"function to stop the layout"),(0,n.kt)("li",{parentName:"ul"},"function to kill the layout"),(0,n.kt)("li",{parentName:"ul"},"a boolean to know if the layout is running or not")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const { stop, start, kill, isRunning } = useWorkerLayoutForceAtlas2(...);\n")),(0,n.kt)("p",null,"With this hook, you can implement your own component to manage the worker."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-sigma/layout-core @react-sigma/layout-forceatlas2\n")),(0,n.kt)("p",null,"Then you can follow this example to see how to use it :"),(0,n.kt)(l.G,{code:'import React, { useEffect, useState } from "react";\n\nimport Graph from "graphology";\nimport { Attributes } from "graphology-types";\n\nimport { SigmaContainer, useSigma, useLoadGraph } from "@react-sigma/core";\nimport { useWorkerLayoutForceAtlas2 } from "@react-sigma/layout-forceatlas2";\n\nimport { useSeedRandom } from "../useSeedRandom";\nimport { GraphDefault } from "../GraphDefault";\n\nexport const LayoutFA2: React.FC = () => {\n  const Fa2: React.FC = () => {\n    const { start, kill, isRunning } = useWorkerLayoutForceAtlas2({ settings: { slowDown: 10 } });\n\n    useEffect(() => {\n      // start FA2\n      start();\n      return () => {\n        // Kill FA2 on unmount\n        kill();\n      };\n    }, [start, kill]);\n\n    return null;\n  };\n\n  return (\n    <SigmaContainer style={{ height: "500px" }}>\n      <GraphDefault order={100} probability={0.1} />\n      <Fa2 />\n    </SigmaContainer>\n  );\n};\n\nexport default LayoutFA2;\n',title:"FA2 layout on the graph",mdxType:"CodePreview"},(0,n.kt)(g,{mdxType:"LayoutFA2"})),(0,n.kt)("p",null,"If you want to display start/stop button, you can use the control component we provide for each worker component,\nthat display a start/stop button on the graph."),(0,n.kt)(l.G,{code:'import React, { FC, useEffect, useState } from "react";\n\nimport "@react-sigma/core/lib/react-sigma.min.css";\nimport { SigmaContainer, ControlsContainer, useSigma } from "@react-sigma/core";\nimport { LayoutForceAtlas2Control } from "@react-sigma/layout-forceatlas2";\n\nimport { GraphDefault } from "../GraphDefault";\n\nconst LayoutFA2Control: FC = () => {\n  return (\n    <SigmaContainer style={{ height: "500px" }}>\n      <GraphDefault order={100} probability={0.1} />\n      <ControlsContainer position={"bottom-right"}>\n        <LayoutForceAtlas2Control settings={{ settings: { slowDown: 10 } }} />\n      </ControlsContainer>\n    </SigmaContainer>\n  );\n};\n\nexport default LayoutFA2Control;\n',title:"Click on the FA2 controller",mdxType:"CodePreview"},(0,n.kt)(y,{mdxType:"LayoutFA2Control"})))}v.isMDXComponent=!0},5042:()=>{}}]);